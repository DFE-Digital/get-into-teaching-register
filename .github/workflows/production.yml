---  
name: Release to Production
on: 
  workflow_dispatch:
    inputs:
      tags:
        description: 'Release Tag'
        required: true

env:
  DOCKERHUB_REPOSITORY: dfedigital/get-teacher-training-adviser-service
  TF_VAR_RAILS_ENV:     "production"
  CF_PROVIDER_DIR:     "$HOME/.terraform.d/plugins/linux_amd64/terraform-provider-cloudfoundry"
  CF_PROVIDER_URL:     https://github.com/cloudfoundry-community/terraform-provider-cloudfoundry/releases/download/v0.12.3/terraform-provider-cloudfoundry_v0.12.3_linux_amd64

jobs:
  deploy_qa:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:

       - name: Check Tag is a Release
         run: |
               rval=$(curl -s -X GET https://api.github.com/repos/DFE-Digital/get-teacher-training-adviser-service/releases/tags/${{ github.event.inputs.tags }} | jq -r ".message")
               if [ "${rval}" = "Not Found" ]
               then
                   echo "Tag ${{ github.event.inputs.tags }} cannot be found in releases"
                   exit 1
               fi
               exit 0

       - name: Checkout
         uses: actions/checkout@v2
         with:
             ref: "${{ github.event.inputs.tags }}"

       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(git rev-parse --short HEAD)

       - uses: hashicorp/setup-terraform@v1
         with:
              terraform_version: 0.12.29

       - name: Install Terraform CloudFoundry Provider
         run: |
             mkdir -p $HOME/.terraform.d/plugins/linux_amd64
             wget -O ${{ env.CF_PROVIDER_DIR }} ${{ env.CF_PROVIDER_URL}}
             chmod +x ${{ env.CF_PROVIDER_DIR }}
   
       - name: Wait for any previous runs to complete
         uses: softprops/turnstyle@v1
         env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           continue-after-seconds: 180

       - name: Terraform Init
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=production.bk.vars
         env:
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
              ARM_ACCESS_KEY:           "${{ secrets.PROD_ARM_ACCESS_KEY  }}"

       - name: Terraform Plan
         run: |
             cd terraform/paas && pwd
             terraform plan -var-file=production.env.tfvars -out plan
         env:
              TF_VAR_paas_adviser_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}} 
              TF_VAR_HTTPAUTH_PASSWORD: ""
              TF_VAR_HTTPAUTH_USERNAME: ""
              TF_VAR_RAILS_MASTER_KEY:  "${{ secrets.RAILS_MASTER_KEY_PRODUCTION }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
              ARM_ACCESS_KEY:           "${{ secrets.PROD_ARM_ACCESS_KEY  }}"

       - name: Terraform Apply
         run: |
             cd terraform/paas && pwd
             terraform apply -auto-approve plan
         env:
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
              ARM_ACCESS_KEY:           "${{ secrets.PROD_ARM_ACCESS_KEY  }}"
 
       - name: Smoke tests
         run: |
             tests/confidence/healthcheck.sh  "get-teacher-training-adviser-service-prod"  "${{ steps.sha.outputs.short }}"
         env:
             HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
             HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"
   
       - name: Create Sentry release
         if: success()
         uses: getsentry/action-release@v1.1.1
         env:
           SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
           SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
           SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
         with:
           environment:  production
           
       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'Pipeline has failed carrying out job ${{github.job}}'
           SLACK_TITLE: 'Failed to release Teacher Training Adviser Application to Production'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
