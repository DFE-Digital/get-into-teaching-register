name: Deploy to PaaS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to Development/Test/Production/Review etc'
        required: true
      sha:
        description: 'Commit sha to be deployed'
        required: true
      pr:
        description: 'Pull Request Reference'
        required: false
      title:
        description: 'Pull Request Title'
        required: false

env:
  APP_REPOSITORY:  dfedigital/get-teacher-training-adviser-service
  CONTAINER:       get-teacher-training-adviser-service
  DOMAIN:          london.cloudapps.digital

jobs:
  deploy:
    name: 'Deploy ${{ github.event.inputs.environment }}'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
       - name: Checkout
         uses: actions/checkout@v2
         with:
            ref: "${{ github.event.inputs.sha }}"

       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(echo "${{ github.event.inputs.sha }}" | cut -c -7)

       - name: Setup Environment Variables
         id:  variables
         run: |
             if [ "${{github.event.inputs.environment }}" == "Review" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.DEV_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "rolling" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_ROLLING }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "${{ secrets.HTTPAUTH_PASSWORD }}" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "${{ secrets.HTTPAUTH_USERNAME }}" )
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::"review-teacher-training-adviser-${{github.event.inputs.pr}}"
                 echo ::set-output name=pr_name::review-teacher-training-adviser-${{github.event.inputs.pr}}
                 echo ::set-output name=url::"https://review-teacher-training-adviser-${{github.event.inputs.pr}}.${{env.DOMAIN}}"
             fi

             if [ "${{github.event.inputs.environment }}" == "Development" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.DEV_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "rolling" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_ROLLING }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "${{ secrets.HTTPAUTH_PASSWORD }}" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "${{ secrets.HTTPAUTH_USERNAME }}" )
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::$(echo "get-teacher-training-adviser-service-dev" )
                 echo ::set-output name=url::"https://${{env.CONTAINER}}-dev.${{env.DOMAIN}}"
             fi

             if [ "${{github.event.inputs.environment }}" == "Test" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.TEST_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "preprod" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_PREPROD }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "${{ secrets.HTTPAUTH_PASSWORD }}" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "${{ secrets.HTTPAUTH_USERNAME }}" )
                 echo ::set-output name=control::$(echo "test" )
                 echo ::set-output name=healthcheck::$(echo "get-teacher-training-adviser-service-test" )
                 echo ::set-output name=url::"https://${{env.CONTAINER}}-test.${{env.DOMAIN}}"
             fi

             if [ "${{github.event.inputs.environment }}" == "Production" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.PROD_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "production" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_PRODUCTION }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "" )
                 echo ::set-output name=control::$(echo "production" )
                 echo ::set-output name=healthcheck::$(echo "get-teacher-training-adviser-service-prod" )
                 echo ::set-output name=url::"https://review-teacher-training-adviser-${{github.event.inputs.pr}}.${{env.DOMAIN}}"
                 echo ::set-output name=url::"https://${{env.CONTAINER}}-production.${{env.DOMAIN}}"
             fi

       - uses: hashicorp/setup-terraform@v1.2.1
         with:
              terraform_version: 0.13.4

       - name: Wait for any previous runs to complete
         uses: softprops/turnstyle@v1
         env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           continue-after-seconds: 180

       - name: Start ${{ github.event.inputs.environment }} Deployment
         uses: bobheadxi/deployments@v0.4.2
         id: deployment
         with:
           step: start
           token: ${{ secrets.GITHUB_TOKEN }}
           env: ${{ github.event.inputs.environment }}
           ref: ${{ github.event.inputs.sha }}

       - name: Terraform (review)
         if: github.event.inputs.environment == 'Review'
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=review.bk.vars -backend-config="key=${{steps.variables.outputs.pr_name}}.tfstate"
             terraform plan -var-file=review.env.tfvars -out plan
             terraform apply -auto-approve plan
         env:
             TF_VAR_paas_adviser_application_name: "${{steps.variables.outputs.pr_name}}"
             TF_VAR_paas_adviser_route_name:       "${{steps.variables.outputs.pr_name}}"
             ARM_ACCESS_KEY:           "${{ steps.variables.outputs.ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             TF_VAR_RAILS_ENV:         "${{ steps.variables.outputs.RAILS_ENV  }}"
             TF_VAR_paas_adviser_docker_image: ${{env.APP_REPOSITORY}}:review-${{ steps.sha.outputs.short}} 
             TF_VAR_RAILS_MASTER_KEY:  "${{ steps.variables.outputs.RAILS_MASTER_KEY  }}"
             TF_VAR_HTTPAUTH_PASSWORD: "${{ steps.variables.outputs.HTTP_PASSWORD  }}"
             TF_VAR_HTTPAUTH_USERNAME: "${{ steps.variables.outputs.HTTP_USERNAME  }}"
             TF_VAR_docker_username:   "${{ secrets.DOCKERHUB_USERNAME }}"
             TF_VAR_docker_password:   "${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}"

       - name: Terraform (none review)
         if: github.event.inputs.environment != 'Review'
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars
             terraform plan -var-file=${{steps.variables.outputs.control}}.env.tfvars -out plan
             terraform apply -auto-approve plan
         env:
             ARM_ACCESS_KEY:           "${{ steps.variables.outputs.ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             TF_VAR_RAILS_ENV:         "${{ steps.variables.outputs.RAILS_ENV  }}"
             TF_VAR_paas_adviser_docker_image: ${{env.APP_REPOSITORY}}:sha-${{ steps.sha.outputs.short}} 
             TF_VAR_RAILS_MASTER_KEY:  "${{ steps.variables.outputs.RAILS_MASTER_KEY  }}"
             TF_VAR_HTTPAUTH_PASSWORD: "${{ steps.variables.outputs.HTTP_PASSWORD  }}"
             TF_VAR_HTTPAUTH_USERNAME: "${{ steps.variables.outputs.HTTP_USERNAME  }}"
             TF_VAR_docker_username:   "${{ secrets.DOCKERHUB_USERNAME }}"
             TF_VAR_docker_password:   "${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}"

       - name: Smoke tests
         run: |
             tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "${{ steps.sha.outputs.short }}"
         env:
             HTTPAUTH_PASSWORD: "${{ steps.variables.outputs.HTTP_PASSWORD }}"
             HTTPAUTH_USERNAME: "${{ steps.variables.outputs.HTTP_USERNAME }}"

       - name: Update ${{ github.event.inputs.environment }} status
         if: always() 
         uses: bobheadxi/deployments@v0.4.2
         with:
           step: finish
           token: ${{ secrets.GITHUB_TOKEN }}
           status: ${{ job.status }}
           deployment_id: ${{ steps.deployment.outputs.deployment_id }}
           env_url: ${{ steps.variables.outputs.url  }}

       - name: Trigger OWASP Testing
         if: github.ref == 'refs/heads/master' && github.event.inputs.environment == 'Development'
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: owasp
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"environment": "dev"}'

       - name: Review Ready Notification
         if: github.event.inputs.environment == 'Review'
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_USERNAME: "GiT Review"
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#03AC13'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_TITLE:   'Review Pending for : ${{github.event.inputs.title}}'
           SLACK_MESSAGE: 'Review Application can be found at ${{steps.variables.outputs.url}} Pull request can be found at https://github.com/DFE-Digital/${{env.CONTAINER}}/pull/${{ github.event.inputs.pr }}'
           SLACK_FOOTER: "Get Into Teaching Adviser"
           MSG_MINIMAL: true
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

       - name: Post PR comment
         if: github.event.inputs.environment == 'Review'
         run: |
          curl --silent  \
               --header "Accept: application/vnd.github.v3+json" \
               --header "Authorization: Bearer ${{ github.token }}" \
               --request POST \
               --data '{"body": "Review app deployed to ${{steps.variables.outputs.url}}"}'  \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.inputs.pr }}/comments

       - name: Generate Tag from PR Number
         if: github.ref == 'refs/heads/master' && github.event.inputs.environment == 'Development'
         id: tag_version
         run: |
           MATCH="Merge pull request #[0-9]+"
           STRING=$(curl -s -X GET "https://api.github.com/repos/${{github.repository}}/commits/${{github.event.inputs.sha}}" | jq ".commit.message")

           if [[ ${STRING}  =~ ${MATCH} ]] ;
           then
              echo "Pull request merge"
              TAG=$( echo ${STRING} | grep -oh "[0-9]\+" | head -1 )
              BODY=$(curl -s -X GET "https://api.github.com/repos/${REPO}/pulls/${TAG}" | jq ".body")
           else
              echo "Not a pull request merge"
              TAG="0"
              BODY="Nothing"
           fi
           echo ::set-output name=new_tag::"PR-${TAG}"
           echo ::set-output name=changelog::"${BODY}"

       - name: Create a GitHub release
         if: github.ref == 'refs/heads/master' && github.event.inputs.environment == 'Development' && steps.tag_version.outputs.new_tag != '0'
         uses: actions/create-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           tag_name: ${{ steps.tag_version.outputs.new_tag }}
           release_name: Release ${{ steps.tag_version.outputs.new_tag }}
           body: ${{ steps.tag_version.outputs.changelog }}
           commitish: ${{ github.event.inputs.sha }}
            
       - name: Trigger Deployment to  QA
         if: github.ref == 'refs/heads/master' && github.event.inputs.environment == 'Development'
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"environment": "Test", "sha": "${{ github.event.inputs.sha }}"}'

       - name: Slack Notification
         if: failure() 
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#B90E0A'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_TITLE: 'Failure: Deploying to ${{ github.event.inputs.environment }}'
           SLACK_MESSAGE: 'Failure with Deployment for Teacher Training Adviser to ${{ github.event.inputs.environment }} SHA: ${{steps.sha.outputs.short}}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
