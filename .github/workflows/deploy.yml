name: Deploy to PaaS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to Development/Test/Production/Review etc'
        required: true
      sha:
        description: 'Commit sha to be deployed'
        required: true
      pr:
        description: 'Pull Request Reference'
        required: false
      project:
        description: 'Name of Release Project'
        required: false
        default: 'Teacher Training Adviser'

env:
  DOCKERHUB_REPOSITORY:  dfedigital/get-teacher-training-adviser-service
  DOMAIN:                london.cloudapps.digital
  APPLICATION:           Teacher Training Adviser Service
  REVIEW_APPLICATION:    review-teacher-training-adviser
  PAAS_APPLICATION_NAME: get-teacher-training-adviser-service

jobs:
  turnstyle:
    name: Wait for any previous deployments
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
       - name: Turnstyle
         uses: softprops/turnstyle@v1
         with:
            continue-after-seconds: 300
            same-branch-only: false

  deploy:
    name: 'Deploy ${{ github.event.inputs.environment }}'
    runs-on: ubuntu-latest
    needs: turnstyle

    defaults:
      run:
        shell: bash
    steps:
       - name: Checkout
         uses: actions/checkout@v2
         with:
            ref: "${{ github.event.inputs.sha }}"

       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(echo "${{ github.event.inputs.sha }}" | cut -c -7)

       - name: Setup Environment Variables
         id:  variables
         run: |
             if [ "${{github.event.inputs.environment }}" == "Review" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.DEV_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "rolling" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_ROLLING }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "${{ secrets.HTTPAUTH_PASSWORD }}" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "${{ secrets.HTTPAUTH_USERNAME }}" )
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::"${{env.REVIEW_APPLICATION}}-${{github.event.inputs.pr}}"
                 echo ::set-output name=pr_name::${{env.REVIEW_APPLICATION}}-${{github.event.inputs.pr}}
             fi

             if [ "${{github.event.inputs.environment }}" == "Development" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.DEV_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "rolling" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_ROLLING }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "${{ secrets.HTTPAUTH_PASSWORD }}" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "${{ secrets.HTTPAUTH_USERNAME }}" )
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-dev" )
             fi

             if [ "${{github.event.inputs.environment }}" == "Test" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.TEST_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "preprod" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_PREPROD }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "${{ secrets.HTTPAUTH_PASSWORD }}" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "${{ secrets.HTTPAUTH_USERNAME }}" )
                 echo ::set-output name=control::$(echo "test" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-test" )
             fi

             if [ "${{github.event.inputs.environment }}" == "Production" ]
             then
                 echo ::set-output name=ARM_ACCESS_KEY::$(echo "${{ secrets.PROD_ARM_ACCESS_KEY  }}" )
                 echo ::set-output name=RAILS_ENV::$(echo "production" )
                 echo ::set-output name=RAILS_MASTER_KEY::$(echo "${{ secrets.RAILS_MASTER_KEY_PRODUCTION }}" )
                 echo ::set-output name=HTTP_PASSWORD::$(echo "" )
                 echo ::set-output name=HTTP_USERNAME::$(echo "" )
                 echo ::set-output name=control::$(echo "production" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-prod" )
             fi

       - uses: hashicorp/setup-terraform@v1.2.1
         with:
              terraform_version: 0.13.4

       - name: Wait for any previous runs to complete
         uses: softprops/turnstyle@v1
         env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           continue-after-seconds: 180

       - name: Start ${{ github.event.inputs.environment }} Deployment
         uses: bobheadxi/deployments@v0.4.3
         id: deployment
         with:
           step: start
           token: ${{ secrets.GITHUB_TOKEN }}
           env: ${{ github.event.inputs.environment }}
           ref: ${{ github.event.inputs.sha }}

       - name: Terraform (review)
         if: github.event.inputs.environment == 'Review'
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=review.bk.vars -backend-config="key=${{steps.variables.outputs.pr_name}}.tfstate"
             terraform plan -var-file=review.env.tfvars -out plan
             terraform apply -auto-approve plan
         env:
             TF_VAR_paas_adviser_application_name: "${{steps.variables.outputs.pr_name}}"
             TF_VAR_paas_adviser_route_name:       "${{steps.variables.outputs.pr_name}}"
             ARM_ACCESS_KEY:           "${{ steps.variables.outputs.ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             TF_VAR_RAILS_ENV:         "${{ steps.variables.outputs.RAILS_ENV  }}"
             TF_VAR_paas_adviser_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:review-${{ steps.sha.outputs.short}} 
             TF_VAR_RAILS_MASTER_KEY:  "${{ steps.variables.outputs.RAILS_MASTER_KEY  }}"
             TF_VAR_HTTPAUTH_PASSWORD: "${{ steps.variables.outputs.HTTP_PASSWORD  }}"
             TF_VAR_HTTPAUTH_USERNAME: "${{ steps.variables.outputs.HTTP_USERNAME  }}"
             TF_VAR_docker_username:   "${{ secrets.DOCKERHUB_USERNAME }}"
             TF_VAR_docker_password:   "${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}"

       - name: Terraform (none review)
         if: github.event.inputs.environment != 'Review'
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars
             terraform plan -var-file=${{steps.variables.outputs.control}}.env.tfvars -out plan
             terraform apply -auto-approve plan
         env:
             ARM_ACCESS_KEY:           "${{ steps.variables.outputs.ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             TF_VAR_RAILS_ENV:         "${{ steps.variables.outputs.RAILS_ENV  }}"
             TF_VAR_paas_adviser_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}} 
             TF_VAR_RAILS_MASTER_KEY:  "${{ steps.variables.outputs.RAILS_MASTER_KEY  }}"
             TF_VAR_HTTPAUTH_PASSWORD: "${{ steps.variables.outputs.HTTP_PASSWORD  }}"
             TF_VAR_HTTPAUTH_USERNAME: "${{ steps.variables.outputs.HTTP_USERNAME  }}"
             TF_VAR_docker_username:   "${{ secrets.DOCKERHUB_USERNAME }}"
             TF_VAR_docker_password:   "${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}"

       - name: Smoke tests
         run: |
             tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "${{ steps.sha.outputs.short }}"
         env:
             HTTPAUTH_PASSWORD: "${{ steps.variables.outputs.HTTP_PASSWORD }}"
             HTTPAUTH_USERNAME: "${{ steps.variables.outputs.HTTP_USERNAME }}"

       - name: Update ${{ github.event.inputs.environment }} status
         if: always() 
         uses: bobheadxi/deployments@v0.4.3
         with:
           step: finish
           token: ${{ secrets.GITHUB_TOKEN }}
           status: ${{ job.status }}
           deployment_id: ${{ steps.deployment.outputs.deployment_id }}
