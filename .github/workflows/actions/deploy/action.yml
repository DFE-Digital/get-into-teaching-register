name: Deploy to PaaS

inputs:
      environment:
        description: The environment to deploy to Development/Test/Production/Review/Speed/UR etc
        required: true
      sha:
        description: Commit sha to be deployed
        required: true
      pr:
        description: Pull Request Reference
        required: false
      AZURE_CREDENTIALS:
        required: true
      KEY_VAULT:
        required: true
      ARM_ACCESS_KEY:
        required: true
      GITHUB_TOKEN:
        required: true

runs:
    using: composite
    steps:
       - name: Checkout
         uses: actions/checkout@v2.4.0

       - name: set-up-environment
         uses: DFE-Digital/github-actions/set-up-environment@master

       - uses: azure/login@v1
         with:
           creds: ${{ inputs.AZURE_CREDENTIALS }}

       - name: Validate Key Vault Secrets
         uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
         with:
           KEY_VAULT: ${{ inputs.KEY_VAULT }}
           SECRETS: |
                     TTA-KEYS
                     INFRA-KEYS

       - name: Get Short SHA
         id: sha
         shell: bash
         run: echo ::set-output name=short::$(echo "${{ inputs.sha }}" | cut -c -7)

       - name: Setup Environment Variables
         id:  variables
         shell: bash
         run: |
             if [ "${{inputs.environment }}" == "Review" ]
             then
                 echo ::set-output name=control::$(echo "review" )
                 pr_name="${{env.REVIEW_APPLICATION}}-${{inputs.pr}}"
                 echo ::set-output name=pr_name::${pr_name}
                 echo ::set-output name=healthcheck::${pr_name}
                 echo ::set-output name=key::${pr_name}
                 echo "TF_VAR_paas_adviser_application_name=${pr_name}" >> $GITHUB_ENV
                 echo "TF_VAR_paas_adviser_route_name=${pr_name}"       >> $GITHUB_ENV
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:review-${{steps.sha.outputs.short}}
             fi

             if [ "${{inputs.environment }}" == "Development" ]
             then
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-dev" )
                 echo ::set-output name=key::"tta.dev.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

             if [ "${{inputs.environment }}" == "Test" ]
             then
                 echo ::set-output name=control::$(echo "test" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-test" )
                 echo ::set-output name=key::"tta.test.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

             if [ "${{inputs.environment }}" == "UR" ]
             then
                 echo ::set-output name=control::$(echo "ur" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-ur" )
                 echo ::set-output name=key::"tta.ur.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

             if [ "${{inputs.environment }}" == "Production" ]
             then
                 echo ::set-output name=control::$(echo "production" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-prod" )
                 echo ::set-output name=key::"tta.prod.terraform"
                 echo ::set-output name=docker_image::${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}
             fi

       - uses: DfE-Digital/keyvault-yaml-secret@v1
         id:  keyvault-yaml-secret
         with:
           keyvault: ${{ inputs.KEY_VAULT}}
           secret: INFRA-KEYS
           key: LOGIT-API 
         env:
           GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}

       - uses: hashicorp/setup-terraform@v1.3.2
         with:
              terraform_version: 0.14.9

       - name: Terraform ( ${{inputs.environment}} )
         shell: bash
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
             terraform apply -var-file=${{steps.variables.outputs.control}}.env.tfvars -auto-approve
         env:
             ARM_ACCESS_KEY:                   ${{ inputs.ARM_ACCESS_KEY  }}
             TF_VAR_paas_adviser_docker_image: ${{ steps.variables.outputs.docker_image}}
             TF_VAR_AZURE_CREDENTIALS:         ${{ inputs.AZURE_CREDENTIALS }}


       - name: Smoke tests
         shell: bash
         run: |
             tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "${{ steps.sha.outputs.short }}"

       - name: Log Deployment
         if: always()
         uses: DFE-Digital/github-actions/SendToLogit@master
         with:
            LOGIT-API-KEY: ${{ steps.keyvault-yaml-secret.outputs.LOGIT-API }}
            logtype: "github"
            JSON: |
                '{"Application" : "${{env.PAAS_APPLICATION_NAME}}", 
                  "Status"      : "${{ job.status }}",
                  "Action"      : "Deploy",                        
                  "Environment" : "${{inputs.environment}}",              
                  "Version"     : "${{ inputs.sha }}" }'
